* Lógica de programção *

Os estudos de lógica remeten à antiguidade, com registros e citações de Aristóteles (384 a.c.) à lógica matemática. A lógica tmabém está presente na filosofia, quando o ser humano reflete sobre o próprio pensamento.

Desmembrar um problema, organizar um pensamento e ordenar passos para obter algum resultado.

* Lógica analítica *

"... ação de analisar um prblema e julgar se ele é verdadeiro ou falso..."

e. g.

Ontem choveu.

Hoje está chovendo.

Amanhã vai chover.

O que se observa nas frases é um raciocínio lógico. As duas primeiras frases apresentam os fatos, e a terceira frase é a conclusão baseada neles. Só se chega a uma conclusão porque as duas frases anteriores embasam a afirmação. Entretanto, note que os fatos podem ser interpretados de forma errada. Chover não é uma constância em todos os dias do ano, e sim um evento que pode acontecer. Logo, não se pode afirmar que de fato amanhã vai chover. Pelas frases, pode-se considerar que há mais chances de amanhã chover também, mas não se pode afirmar que vai chover.


* Os três pilares da lógica: dedução, indução e abdução *

* Dedução: é utillizada para determinar uma conclusão.

* Indução: observa o mundo como ele é, do geral, e somente a partir daí se pode desenvolver uma lógica ou chegar a uma conclusão (verdadeira ou falsa).

Dedução parte do geral para o particular, a indução do particular para o geral. Dedução as premissas são verdadeiras, garantindo uma conclusão verdadeira, a indução baseia-se em premissas verdadeiras, porém que não garantem uma conclusão verdadeira.

* Adbução: terceira via da lógica, meio-termo, tem caráter intuitivo, concluindo qual a melhor explicação junto com conhecimento de fundo (repertório de conhecimento) não a com maior probabilidade.


* Dedução

Quando chove, a grama fica molhada.

Choveu hoje.

Portanto, a grama está molhada.


* Indução

A grama ficou molhada todas as vezes em que choveu.

Então, se chover amanhã, a grama ficará molhada.


* Abdução

Quando chove, a grama fica molhada.

A grama está molhada, então pode ter chovido.


----------------------------------------------------------- // -----------------------------------------------------------


* Lógica booliana *

George Boole foi o matemático que criou um sistema númerico de valores infinitos para representar a lógica em equações matemáticas. Dois valores são possíveis: um e zero. Zero sendo falso e UM verdadeiro. Valores em oposição um para o outro, valores únicos possíveis.

* Operadores booleanos (conectivos)

* Operador unário: aplicado sobre apenas uma sentença.

* Operador binário: aplicado sobre duas sentenças.


* Disjunção "ou": O “ou” é um operador binário, ou seja, precisa de duas informações para conseguir ser utilizado. Quando tal operador é utilizado, desde que uma das informações seja verdadeira (1), ele resultará em verdadeiro (1). Independentemente se a primeira ou a segunda informação for verdadeira, o retorno será verdadeiro. Se ambas forem falsas (0), o resultado será falso (0).

*Conjunção "e": O “e” é um operador binário e, assim como o “ou”, precisa de duas informações para ser utilizado. O “e” é um operador exigente, porque só retornará verdadeiro (1) se ambas as informações forem verdadeiras (1).

* Negação: Diferentemente do “e” e do “ou”, a negação trabalha baseada em uma única informação, caracterizando-se assim com operador unário. Se a informação é verdadeira (1), torna-se falsa (0); se era falsa (0), torna-se verdadeira (1).


----------------------------------------------------------- // -----------------------------------------------------------


* Algoritmos * 

"... algoritmos são uma série de instruções usadas por computadores visando a resolver dado problema para que se chegue a uma solução.", "... existem, assim, diversas formas de escrever um algoritmo. Algumas são mais informais, algumas formais e matemáticas e outras até mesmo por meio de gráficos."

* Passo de desenvolvimento:

* Descrição do problema
* Analisar o problema
* Desenvolver um algoritmo de alto nível
* Refinar o algoritmo


----------------------------------------------------------- // -----------------------------------------------------------


* Algoritmos: naturais e estruturados; representações visuais, linguagem algorítmica, comandos de entrada, processamento e saída de dados *

"... Os algoritmos partem da lógica para esquematizar os passos necessários para se partir de uma situação original (entrada) e atingir um objetivo (saída)..."


* Algoritmos naturais e estruturados *

* Algoritmos naturais: os algoritmos naturais são criados de maneira simples e escritos de forma textual, usando o português coloquial. São claros, finitos e têm cada passo detalhado. Além disso, os algoritmos contribuem no desenvolvimento de uma aplicação, pois podem direcionar, de forma simples e eficiente, as descrições dos problemas e suas soluções.

* Algoritmos estruturados: os algoritmos estruturados se aproximam de uma linguagem de programação convencional. Esses algoritmos são criados seguindo uma estrutura de comandos, sintaxes e termos específicos. Além disso, apresentam estruturas bem mais definidas, como:

Sequências: instruções executadas uma a uma, na sequência em que aparecem no programa.
Seleções: instrução if-else, que seleciona 1 entre 2 caminhos possíveis.
Repetições: instruções executadas várias vezes.


----------------------------------------------------------- // -----------------------------------------------------------


*Linguagem algorítmica *

"Tanto os algoritmos naturais quanto as representações visuais de algoritmos permitem um nível de clareza muito grande, porém eles têm suas vantagens e desvantagens. A facilidade de perceber o fluxo de execução do programa é evidentemente mais clara, mas sua grande desvantagem é que existe a necessidade do conhecimento das convenções gráficas de cada uma das técnicas, pois, apesar de serem simples, não são naturais, pois é mais comum a expressão de ações por meio de palavras."

* Pseudocódigo *

"... também é chamado de linguagem estruturada, pois reúne um conjunto de comando ou ações, usando uma linguagem simples, que se aproxima de uma linguagem de programação."


* Portugol *

Pseudolinguagem algorítmica que utiliza a língua portuguesa PORTguês + alGOl + PascaL, português estruturado, criado por Antônio Carlos e Antônio Manso em 1986.


----------------------------------------------------------- // -----------------------------------------------------------


* Manipulação de dados *

"... verá como os dados são representados internamente para que o computador possa entendê-los e utilizá-los corretamente..."


* Representação de dados *


* Representação interna *

Humanos normalmente usam base decimal de 10, por causa de seus dedos. Computadores usam o sistema binário (base de 2, zero e um). Podendo ser representados por valores como 0 e 1, ligade e desligado, verdadeiro ou falso. O elemento mínimo capaz de guardar informação é o bit (binary digit). Para números maiores, como no sistema binário a quantidade seria gigantesca, também se usa outros sistemas como hexadecimal ou octal.


* Tipos Primitivos *

Dados são armazenado de acordo com o tipo de informação que ele representa e com a operação ser realizada com eles. O uso da representação correta otimiza os recursos empregados, gerando processamento mais rápido. Existem tipos de dados mais comuns encontrados na maioria das linguagens de programação, formando a base de como a informação deve ser armazenada.  


* Inteiro - números pertencentes ao conjunto dos inteiros. (ℤ = {..., - 3, - 2, - 1, 0, 1, 2, 3, ...}), ou seja, não têm parte fracionária e podem ser negativos, nulos ou positivos;

* Real - números que tem parte fracionária, ou ponto flutuante, os números reais são formados pela união dos conjuntos dos números Naturais, Inteiros, Racionais e Irracionais;

* Cadeia - representa uma formação literal, com dois 2 ou mais caracteres alfanúmericos, armazenamento de texto ou quantidade grande de caracteres.

* Caractere - representa qualquer caractere da união dos valores pertencentes ao sistema numérico decimal, na forma de números binários utilizando o padrão ASCII. Indicação de início e fim se dá pelo uso de aspas simples.

* Lógico - representação de dois valores: verdadeiro ou falso (true or false), V ou F, pelos estados ligado e desligado, aberto e fechado, etc. Sempre apenas um valor.


* Constantes e Variáveis *
Os algoritmos lidam com manipulação de dados, estes poderam apresentar valores diferentes em momentos diferentes. Dados constantes não se modificam do início ao fim do algoritmo ou programa. Já os variáveis  se modificam seja por cálculos internos ou interferência do usuário.


* O ato de criar uma variável é chamado de declaração de variável, passo básico em várias linguagens de programação; não sendo possível usar uma variável sem antes declará-la.
Ao se declarar se atribui um nome para que seja referenciada posteriormente no código.

Declarar uma variável significa reservar um espaço na memória do computador para guardar um valor. 


* Manipulação dos dados:

* Identificação *

Para manipular esses dados é necessário que sejam identificados, assim pode ser recuperado pelo seu nome (seguindo algumas regras de descrição de como podem ser escritos esses nomes):

* Deve iniciar com um caractere do alfabeto (letra).
* Pode ser seguido por um ou mais caracteres alfanuméricos (letras e números).
* Não pode conter caracteres especiais nem espaços, com exceção do sublinhado (‘_’).
* Não pode conter palavras reservadas (palavras próprias da linguagem de programação, como instruções ou comandos, tipos de variáveis etc.).
* Não pode conter caracteres do alfabeto latino (ç, ~, ´, `, ^, ¨).
* Evitar iniciar com letras maiúsculas. No caso de nomes compostos, a segunda palavra deve iniciar por letra maiúscula (camel case).


* Definição ou declaração *

Declaração de constantes: const inteiro variavelTeste = 0

* Atribuição de valores *
Forma mais comum de manipulação de dados é a atribuição (=), quando o algoritmo recebe um valor.


* Expressões aritméticas *
"... os operadores são aritméticos e os operandos são valores do tipo inteiro ou real..."


----------------------------------------------------------- // -----------------------------------------------------------


* Condicionais: lógica booliana, estrutura condicional simples e composta *

* Lógica booliana *
"...a lógica booliana, também chamada de álgebra booliana, é uma forma de representação lógica com o uso de equações matemáticas..."


* Operadores relacionais *
São operadores de comparação entre valores e/ou expressões cujo resultado é um valor lógico (verdadeiro ou falso)

Igual, Maior que, Menor que, Maior ou igual a, Menor ou igual a, Diferente de


* Equações boolianas *

E(AND), OU(OR), NÃO(NOT), NÃO-E(NAND), NÃO-OU(NOR), OU-EXCLUSIVO(XOR) e NÃO-OU-EXCLUSIVO(XNOR).


* Estruturas condicionais *
Estruturas que necessitam de condições para serem testadas. Estruturas de decisão ou desvio condicional.


* Estrutura condicional simples *
Função de executar um ou vários comandos para testar se a condição é verdaeira ou falsa. Caso seja falsa, a estrutura é finalizada sem executar os comandos.


* Estrutura condicional composta * 
Mesmo princípio da estrutura condicional simples, porém, caso a condição não seja executada, o algoritmo segue a execução para outro comando.


* Escolha caso *

----------------------------------------------------------- // -----------------------------------------------------------

escolha caso (variavel)

caso 1:		
		comando()
		pare

caso 2:

caso 3:

caso contrario

----------------------------------------------------------- // -----------------------------------------------------------


* Repetições: estruturas de repetição condicional pré-teste, pós-teste e com variável de controle *
"...  As estruturas de repetição são basicamente blocos de comandos que são repetidos até atingirem uma condição definida, como loopings..."
As estruturas de repetição podem ser definidas como pré-teste, pós-teste e com variável.

* Estrutura de repetição pré-teste: enquanto (while) *
A estrutura pré-teste, tal como seu nome aponta, é uma estrutura que verificará se a condição especificada no código é atendida antes mesmo de executar os comandos do laço de repetição, dessa forma, enquanto a condição estiver sendo atendida (retornando verdadeiro), os comandos definidos dentro desse laço serão executados. Se a condição seguir sendo verdadeira, o comando seguirá sendo executado repetidamente até que a condição em algum momento retorne falso. Caso a condição não seja atendida já em sua primeira execução, a estrutura de repetição será finalizada e as informações dentro dela não serão percorridas em momento algum, portanto, ao criar essa estrutura de repetição, atente-se para que o contexto inserido permita a entrada nessa estrutura no mínimo uma vez quando necessário.



